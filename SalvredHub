local customfont = "Arcade" --Enter one of all existed fonts.

for x, y in pairs(game:GetDescendants()) do
    if y:IsA("TextLabel") or y:IsA("TextButton") then
        y.Font = Enum.Font[customfont]
    end
end

setclipboard("https://scriptblox.com/script/Universal-Script-Read-This-Please-17832")

local player = game.Players.LocalPlayer

local function createBillboardGui(character)
    local head = character:WaitForChild("Head")

    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Parent = head
    billboardGui.Adornee = head
    billboardGui.Size = UDim2.new(4, 0, 1, 0) -- Ajusta el tamaño del BillboardGui
    billboardGui.StudsOffset = Vector3.new(0, 2, 0) -- Ajusta la posición del texto sobre la cabeza
    billboardGui.AlwaysOnTop = true

    local textLabel = Instance.new("TextLabel")
    textLabel.Parent = billboardGui
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = player.DisplayName -- Muestra el DisplayName del jugador
    textLabel.TextStrokeTransparency = 0 -- Agrega un contorno al texto
    textLabel.TextScaled = true -- Escala el texto para que se ajuste al tamaño del TextLabel
    textLabel.Font = Enum.Font.SourceSansBold

    -- Función para cambiar los colores RGB
    local function updateColor()
        while true do
            for i = 0, 1, 0.01 do
                textLabel.TextColor3 = Color3.fromHSV(i, 1, 1) -- Cambia el color usando el espectro HSV
                wait(0.05) -- Ajusta la velocidad de cambio de color
            end
        end
    end

    -- Ejecutar la función en un hilo separado para que el color cambie continuamente
    spawn(updateColor)
end

-- Crear el BillboardGui cuando el personaje aparezca
player.CharacterAdded:Connect(createBillboardGui)

-- Si el personaje ya está cargado, crear el BillboardGui inmediatamente
if player.Character then
    createBillboardGui(player.Character)
end

local GameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name

local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/AdenoxScripterm/Orion-Library-Edited/main/Orion%20Edited"))()
local Window = OrionLib:MakeWindow({Name = "SalvredHub | " .. identifyexecutor() .. " | " .. GameName, HidePremium = false, SaveConfig = true, ConfigFolder = "SalvredHubCode"})

OrionLib:MakeNotification({
	Name = "1/09/2024",
	Content = "Hello, look, go to the clipboard and you will see that you have a link. You will put that link in Google, it will take you to scriptblox, read what the description says so that it works in Codex.",
	Image = "rbxassetid://17366458568",
	Time = 60
})

-- Función para verificar y notificar sobre la presencia de objetos en CoreGui
local function checkAndNotify()
    local CoreGui = game:GetService("CoreGui")
    local found = false
    local names = {}
    local notificationImageId = "17366458568"  -- ID predeterminado para la notificación
    
    -- Variantes de nombres a detectar y sus IDs de notificación
    local ids = {
        ["Codex"] = "11558559086",
        ["Arceus"] = "18951446226",
        ["Arceus X"] = "18951446226",
        ["Arceus x"] = "18951446226",
        ["arceus x"] = "18951446226",
        ["Arceus X Neo"] = "18951446226",
        ["Arceus X NEO"] = "18951446226",
        ["ArceusXNeo"] = "18951446226",
        ["VegaXAndroidUI"] = "18953320590",
        ["Delta"] = "12730597972",
        ["DeltaGui"] = "12730597972",
        ["G2L"] = "12730597972",
        ["AppleWare iOS"] = "18954192704",
        ["Cubix"] = "18135302048",
        ["Fluxus"] = "17366458568",
        ["FluxusAndroid"] = "17366458568",
        ["fluxusandroid"] = "17366458568"
    }
    
    -- Verificar objetos
    for name, id in pairs(ids) do
        local obj = CoreGui:FindFirstChild(name)
        if obj then
            table.insert(names, name == "VegaXAndroidUI" and "Vega X" or
                                (name == "G2L" or name == "DeltaGui" and "Delta X" or
                                (name == "AppleWare iOS" and "AppleWare" or
                                (name == "Cubix" and "Cubix" or name))))
            notificationImageId = id
            found = true
        end
    end

    -- Notificar si se encontró algún objeto
    if found then
        OrionLib:MakeNotification({
            Name = "Your Executor",
            Content = "Executor: " .. table.concat(names, ", "),
            Image = "rbxassetid://" .. notificationImageId,
            Time = 5
        })
    end
end

-- Llamar a la función para verificar y notificar al iniciar el script
checkAndNotify()

-- El resto del código sigue igual
-- Agrega aquí el resto de tu script...

local InfoTab = Window:MakeTab({
	Name = "Information",
	Icon = "rbxassetid://17140853847",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]

local ClockLabel = InfoTab:AddLabel("")

-- Función para formatear la hora y la fecha actual
local function FormatTime()
    local currentTime = os.date("*t")
    local hour = currentTime.hour
    local amPm = "AM"

    if hour >= 12 then
        amPm = "PM"
        if hour > 12 then
            hour = hour - 12
        end
    elseif hour == 0 then
        hour = 12
    end

    local formattedTime = string.format("%02d:%02d:%02d %s", hour, currentTime.min, currentTime.sec, amPm)
    local formattedDate = string.format("%02d/%02d/%04d", currentTime.day, currentTime.month, currentTime.year)

    return formattedDate .. " " .. formattedTime
end

-- Función para actualizar el reloj
local function UpdateClock()
    while true do
        local startTime = tick()
        
        -- Actualizar el texto del label con la fecha y hora formateada
        ClockLabel:Set("Date & Time: " .. FormatTime())
        
        -- Esperar el tiempo restante hasta el siguiente segundo
        local elapsedTime = tick() - startTime
        wait(1 - elapsedTime)
    end
end

-- Iniciar la actualización del reloj
spawn(UpdateClock)

-- Crear labels para mostrar los días, meses y años en Roblox
local DaysInRobloxLabel = InfoTab:AddLabel("Days on Roblox: Loading...")
local MonthsInRobloxLabel = InfoTab:AddLabel("Months on Roblox: Loading...")
local YearsInRobloxLabel = InfoTab:AddLabel("Years on Roblox: Loading...")

-- Función para calcular los días, meses y años en Roblox
local function CalculateTimeOnRoblox()
    local player = game.Players.LocalPlayer
    local daysInRoblox = player.AccountAge
    local monthsInRoblox = math.floor(daysInRoblox / 30)
    local yearsInRoblox = math.floor(daysInRoblox / 365)

    -- Actualizar los labels
    DaysInRobloxLabel:Set("Days on Roblox: " .. daysInRoblox .. " days")
    MonthsInRobloxLabel:Set("Months on Roblox: " .. monthsInRoblox .. " months")
    YearsInRobloxLabel:Set("Years on Roblox: " .. yearsInRoblox .. " years")
end

-- Llamar a la función para calcular el tiempo en Roblox
CalculateTimeOnRoblox()

local PlayerTab = Window:MakeTab({
 Name = "LocalPlayer",
 Icon = "rbxassetid://12730597972",
 PremiumOnly = false
})

local Section = PlayerTab:AddSection({
 Name = "LocalYou"
})

local targetPosition = Vector3.new(0, 0, 0) -- Coordenadas iniciales

local Folder = Instance.new("Folder", game.Workspace)
local Part = Instance.new("Part", Folder)
local Attachment1 = Instance.new("Attachment", Part)
Part.Anchored = true
Part.CanCollide = false
Part.Transparency = 1

if not getgenv().Network then
    getgenv().Network = {
        BaseParts = {},
        Velocity = Vector3.new(14.46262424, 14.46262424, 14.46262424)
    }

    Network.RetainPart = function(Part)
        if typeof(Part) == "Instance" and Part:IsA("BasePart") and Part:IsDescendantOf(game.Workspace) then
            table.insert(Network.BaseParts, Part)
            Part.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0)
            Part.CanCollide = false
        end
    end

    local function EnablePartControl()
        game:GetService("RunService").Heartbeat:Connect(function()
            sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius", math.huge)
            for _, Part in pairs(Network.BaseParts) do
                if Part:IsDescendantOf(game.Workspace) then
                    Part.Velocity = Network.Velocity
                end
            end
        end)
    end

    EnablePartControl()
end

local function ForcePart(v)
    if v:IsA("Part") and not v.Anchored and not v.Parent:FindFirstChild("Humanoid") and not v.Parent:FindFirstChild("Head") and v.Name ~= "Handle" then
        for _, x in next, v:GetChildren() do
            if x:IsA("BodyAngularVelocity") or x:IsA("BodyForce") or x:IsA("BodyGyro") or x:IsA("BodyPosition") or x:IsA("BodyThrust") or x:IsA("BodyVelocity") or x:IsA("RocketPropulsion") then
                x:Destroy()
            end
        end
        if v:FindFirstChild("Attachment") then
            v:FindFirstChild("Attachment"):Destroy()
        end
        if v:FindFirstChild("AlignPosition") then
            v:FindFirstChild("AlignPosition"):Destroy()
        end
        if v:FindFirstChild("Torque") then
            v:FindFirstChild("Torque"):Destroy()
        end
        v.CanCollide = false
        local Torque = Instance.new("Torque", v)
        Torque.Torque = Vector3.new(100000, 100000, 100000)
        local AlignPosition = Instance.new("AlignPosition", v)
        local Attachment2 = Instance.new("Attachment", v)
        Torque.Attachment0 = Attachment2
        AlignPosition.MaxForce = math.huge
        AlignPosition.MaxVelocity = math.huge
        AlignPosition.Responsiveness = 200
        AlignPosition.Attachment0 = Attachment2
        AlignPosition.Attachment1 = Attachment1
    end
end

local blackHoleActive = false

local function toggleBlackHole()
    if blackHoleActive then
        blackHoleActive = false
    else
        blackHoleActive = true
        for _, v in next, game.Workspace:GetDescendants() do
            ForcePart(v)
        end

        game.Workspace.DescendantAdded:Connect(function(v)
            if blackHoleActive then
                ForcePart(v)
            end
        end)

        spawn(function()
            while blackHoleActive and game:GetService("RunService").RenderStepped:Wait() do
                Attachment1.WorldPosition = targetPosition
            end
        end)
    end
end

PlayerTab:AddTextbox({
    Name = "Coordinates TextBox",
    Default = "",
    TextDisappear = false,
    Callback = function(Value)
        -- Validar y convertir las coordenadas
        local x, y, z = Value:match("(-?%d+%.?%d*)%s*(-?%d+%.?%d*)%s*(-?%d+%.?%d*)")
        if x and y and z then
            local xNum, yNum, zNum = tonumber(x), tonumber(y), tonumber(z)
            if xNum and yNum and zNum then
                targetPosition = Vector3.new(xNum, yNum, zNum)
                if blackHoleActive then
                    -- Actualizar la posición del agujero negro inmediatamente si está activo
                    Attachment1.WorldPosition = targetPosition
                end
            end
        end
    end
})

PlayerTab:AddToggle({
    Name = "Black Hole Coordinates",
    Default = false,
    Callback = function(Value)
        if Value then
            toggleBlackHole()
        else
            blackHoleActive = false
        end
    end    
})

-- Toggle para Infinite Jump
local InfiniteJumpEnabled = false

PlayerTab:AddToggle({
    Name = "Infinite Jump",
    Default = false,
    Callback = function(Value)
        InfiniteJumpEnabled = Value
    end
})

game:GetService("UserInputService").JumpRequest:connect(function()
    if InfiniteJumpEnabled then
        game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):ChangeState("Jumping")
    end
end)

PlayerTab:AddSlider({
 Name = "Walkspeed",
 Min = 16,
 Max = 3500,
 Default = 16,
 Color = Color3.fromRGB(255,255,255),
 Increment = 1,
 ValueName = "WalkSpeed",
 Callback = function(WS)
  game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = WS
 end    
})

PlayerTab:AddSlider({
 Name = "JumpPower",
 Min = 50,
 Max = 5000,
 Default = 50,
 Color = Color3.fromRGB(255,0,0),
 Increment = 1,
 ValueName = "JumpPower",
 Callback = function(JP)
  game.Players.LocalPlayer.Character.Humanoid.JumpPower = JP
 end    
})

PlayerTab:AddSlider({
    Name = "Gravity",
    Min = 1,
    Max = 500,
    Default = 196,  -- La gravedad predeterminada de Roblox es 196.2
    Color = Color3.fromRGB(255,0,0),
    Increment = 1,
    ValueName = "Gravity",
    Callback = function(Gravity)
        game.Workspace.Gravity = Gravity
    end    
})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Variable para almacenar el HipHeight original
local originalHipHeight = humanoid.HipHeight

-- Función para ajustar el HipHeight
local function setHipHeight(height)
	humanoid.HipHeight = originalHipHeight + height
end

-- Crear slider para ajustar la altura de flotación (HipHeight)
PlayerTab:AddSlider({
	Name = "Hip Height",
	Min = 0,
	Max = 100,
	Default = 0,
	Color = Color3.fromRGB(255, 255, 255),
	Increment = 1,
	ValueName = "Hip Height",
	Callback = function(value)
		setHipHeight(value)
	end    
})

-- Asegurarse de que el HipHeight se restablezca al reaparecer
player.CharacterAdded:Connect(function(char)
	character = char
	humanoid = character:WaitForChild("Humanoid")

	-- Restablecer el HipHeight cuando el personaje reaparece
	setHipHeight(0)
end)

PlayerTab:AddSlider({
    Name = "Camera Fov",
    Min = 70,
    Max = 150,
    Default = 70,  -- Valor predeterminado del FOV
    Increment = 1,
    ValueName = "Fov",
    Callback = function(Fov)
        workspace.CurrentCamera.FieldOfView = Fov
    end    
})

local selectedPlayer
local cameraToggle = false
local playerDropdown

-- Función para actualizar la lista de jugadores
local function updatePlayerList()
    local playerNames = {}
    for _, player in pairs(game.Players:GetPlayers()) do
        table.insert(playerNames, player.Name)
    end
    playerDropdown:Refresh(playerNames, true)  -- Refrescar las opciones del dropdown
end

-- Función para actualizar la cámara
local function updateCamera()
    if cameraToggle and selectedPlayer and selectedPlayer.Character then
        local humanoid = selectedPlayer.Character:FindFirstChild("Humanoid")
        if humanoid then
            workspace.CurrentCamera.CameraSubject = humanoid
        end
    else
        workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
    end
end

-- Función para manejar el cambio de cámara cuando el personaje seleccionado muere
local function onCharacterAdded(character)
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.Died:Connect(function()
        if selectedPlayer == game.Players.LocalPlayer then
            updateCamera()
        end
    end)
    updateCamera()  -- Actualizar la cámara cuando el personaje se añade
end

-- Dropdown para seleccionar el jugador
playerDropdown = PlayerTab:AddDropdown({
    Name = "Select Player To View",
    Default = "",
    Options = {},
    Callback = function(Value)
        selectedPlayer = game.Players:FindFirstChild(Value)
        if selectedPlayer then
            selectedPlayer.CharacterAdded:Connect(onCharacterAdded)  -- Conectar el evento CharacterAdded
            if selectedPlayer.Character then
                onCharacterAdded(selectedPlayer.Character)
            end
        end
        updateCamera()  -- Actualizar la cámara al cambiar de jugador
    end    
})

-- Toggle para activar/desactivar el seguimiento de la cámara
PlayerTab:AddToggle({
    Name = "View Selected Player",
    Default = false,
    Callback = function(Value)
        cameraToggle = Value
        updateCamera()  -- Actualizar la cámara según el estado del toggle
    end    
})

-- Actualizar la lista de jugadores al entrar o salir un jugador
game.Players.PlayerAdded:Connect(updatePlayerList)
game.Players.PlayerRemoving:Connect(updatePlayerList)

-- Manejar la aparición del personaje del jugador local
game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
    character:WaitForChild("Humanoid")  -- Esperar a que aparezca el Humanoid
    updateCamera()  -- Asegurar que la cámara siga al jugador seleccionado al reaparecer
end)

-- Inicializar la lista de jugadores cuando se carga el script
updatePlayerList()

local Universal = Window:MakeTab({
	Name = "Universal",
	Icon = "rbxassetid://11558559086",
	PremiumOnly = false
})

Universal:AddButton({
	Name = "Who Created SalvredHub?",
	Callback = function()OrionLib:MakeNotification({
	Name = "Who",
	Content = "Salved/Salvred, Hello I Love The Gyat from Tetsumeki",
	Image = "rbxassetid://16136325038",
	Time = 5
})

--[[
Title = <string> - The title of the notification.
Content = <string> - The content of the notification.
Image = <string> - The icon of the notification.
Time = <number> - The duration of the notfication.
]]
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

local selectedPlayer = nil
local blackHoleActive = false

local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local Folder = Instance.new("Folder", Workspace)
local Part = Instance.new("Part", Folder)
local Attachment1 = Instance.new("Attachment", Part)
Part.Anchored = true
Part.CanCollide = false
Part.Transparency = 1

if not getgenv().Network then
    getgenv().Network = {
        BaseParts = {},
        Velocity = Vector3.new(14.46262424, 14.46262424, 14.46262424)
    }

    Network.RetainPart = function(Part)
        if typeof(Part) == "Instance" and Part:IsA("BasePart") and Part:IsDescendantOf(Workspace) then
            table.insert(Network.BaseParts, Part)
            Part.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0)
            Part.CanCollide = false
        end
    end

    local function EnablePartControl()
        LocalPlayer.ReplicationFocus = Workspace
        RunService.Heartbeat:Connect(function()
            sethiddenproperty(LocalPlayer, "SimulationRadius", math.huge)
            for _, Part in pairs(Network.BaseParts) do
                if Part:IsDescendantOf(Workspace) then
                    Part.Velocity = Network.Velocity
                end
            end
        end)
    end

    EnablePartControl()
end

local function ForcePart(v)
    if v:IsA("Part") and not v.Anchored and not v.Parent:FindFirstChild("Humanoid") and not v.Parent:FindFirstChild("Head") and v.Name ~= "Handle" then
        for _, x in next, v:GetChildren() do
            if x:IsA("BodyAngularVelocity") or x:IsA("BodyForce") or x:IsA("BodyGyro") or x:IsA("BodyPosition") or x:IsA("BodyThrust") or x:IsA("BodyVelocity") or x:IsA("RocketPropulsion") then
                x:Destroy()
            end
        end
        if v:FindFirstChild("Attachment") then
            v:FindFirstChild("Attachment"):Destroy()
        end
        if v:FindFirstChild("AlignPosition") then
            v:FindFirstChild("AlignPosition"):Destroy()
        end
        if v:FindFirstChild("Torque") then
            v:FindFirstChild("Torque"):Destroy()
        end
        v.CanCollide = false
        local Torque = Instance.new("Torque", v)
        Torque.Torque = Vector3.new(100000, 100000, 100000)
        local AlignPosition = Instance.new("AlignPosition", v)
        local Attachment2 = Instance.new("Attachment", v)
        Torque.Attachment0 = Attachment2
        AlignPosition.MaxForce = 9999999999999999
        AlignPosition.MaxVelocity = math.huge
        AlignPosition.Responsiveness = 200999999999999999999999
        AlignPosition.Attachment0 = Attachment2
        AlignPosition.Attachment1 = Attachment1
    end
end

local function toggleBlackHole(value)
    blackHoleActive = value
    if blackHoleActive then
        for _, v in next, Workspace:GetDescendants() do
            ForcePart(v)
        end

        Workspace.DescendantAdded:Connect(function(v)
            if blackHoleActive then
                ForcePart(v)
            end
        end)

        spawn(function()
            while blackHoleActive and RunService.RenderStepped:Wait() do
                if selectedPlayer then
                    local targetHRP = selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if targetHRP then
                        Attachment1.WorldCFrame = targetHRP.CFrame
                    end
                else
                    Attachment1.WorldCFrame = humanoidRootPart.CFrame
                end
            end
        end)
    end
end

local function UpdateDropDownOptions(DropDown)
    local playerNames = {}
    for _, player in pairs(Players:GetPlayers()) do
        table.insert(playerNames, player.Name)
    end
    DropDown:Refresh(playerNames, true)  -- Actualiza la lista y selecciona el valor por defecto (el primero)
end


-- Dropdown para seleccionar jugadores
local PlayerDropDown = Universal:AddDropdown({
    Name = "Select Player To Black Hole",
    Default = "None",
    Options = {},  -- Las opciones se actualizarán en tiempo real
    Callback = function(selectedName)
        selectedPlayer = Players:FindFirstChild(selectedName)
    end    
})

-- Actualizar la lista al iniciar
UpdateDropDownOptions(PlayerDropDown)

-- Conectar la actualización de la lista cuando un jugador se une o se va
Players.PlayerAdded:Connect(function()
    UpdateDropDownOptions(PlayerDropDown)
end)

Players.PlayerRemoving:Connect(function()
    UpdateDropDownOptions(playerDropDown)
end)

-- Toggle para Black Hole
Universal:AddToggle({
    Name = "Toggle Black Hole",
    Default = false,
    Callback = function(value)
        toggleBlackHole(value)
    end    
})

Universal:AddButton({
	Name = "Mobile Shiftlock",
	Callback = function()loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-Mobile-Shiftlock-12348"))()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]

Universal:AddButton({
	Name = "FlyMobileV1",
	Callback = function()loadstring(game:HttpGet("https://pastebin.com/raw/XEhjj81x"))()
      		print("SexoKat")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


Universal:AddButton({
	Name = "TpPlayers",
	Callback = function()loadstring(game:HttpGet("https://pastebin.com/raw/JCWAp19A", true))()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


Universal:AddButton({
	Name = "IY",
	Callback = function()loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
      		print("Soon...")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


Universal:AddButton({
	Name = "CarFly",
	Callback = function()loadstring(game:HttpGet("https://pastebin.com/raw/xRr0MSDy"))()
      		print("sex")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


Universal:AddButton({
	Name = "SystemSalvred(Anims)",
	Callback = function()loadstring(game:HttpGet("https://raw.githubusercontent.com/AdenoxScripterm/SystemSalvred/main/SalvredBrokenor"))()
      		print("sex")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


Universal:AddButton({
	Name = "NamelessAdmin!Fixed",
	Callback = function()loadstring(game:HttpGet("https://raw.githubusercontent.com/ltseverydayyou/Nameless-Admin/main/Source"))();
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]



Universal:AddButton({
	Name = "Rochips Panel",
	Callback = function()if "Rochips Loader" then
	local Rochips_panel,v,u,i=loadstring,"/snippets","gwwv","/raw/main.lua" ;
	Rochips_panel(game:HttpGet("https://glot.io"..v.."/" ..u.."877ga3"..i))();
	return "it will load in around 3 - 131 seconds"
end
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]

-- Botón para obtener la herramienta de teletransporte
Universal:AddButton({
    Name = "Get Teleport Tool",
    Callback = function()
        -- Verificar si la herramienta ya existe en el backpack o en el character
        local player = game.Players.LocalPlayer
        local backpack = player.Backpack
        local character = player.Character

        if not backpack:FindFirstChild("Teleport Tool") and not character:FindFirstChild("Teleport Tool") then
            local tool = Instance.new("Tool")
            tool.Name = "Teleport Tool"
            tool.RequiresHandle = false
            
            -- Función de teletransporte
            local function teleport()
                local mouse = player:GetMouse()
                local position = mouse.Hit.p + Vector3.new(0, 3, 0) -- Eleva 3 unidades por encima del punto de clic
                player.Character:SetPrimaryPartCFrame(CFrame.new(position))
            end

            tool.Activated:Connect(teleport)
            tool.Parent = backpack

            -- Mantener la herramienta tras la muerte
            player.CharacterAdded:Connect(function(char)
                -- Asegurarse de que la herramienta no se duplica y se restaura
                if not player.Backpack:FindFirstChild("Teleport Tool") and not char:FindFirstChild("Teleport Tool") then
                    local newTool = tool:Clone()
                    newTool.Parent = player.Backpack
                    newTool.Activated:Connect(teleport)  -- Reasignar la función de teletransporte
                end
            end)
        end
    end
})

local Brookhaven = Window:MakeTab({
	Name = "Brookhaven",
	Icon = "rbxassetid://17366458568",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]


Brookhaven:AddButton({
	Name = "R4D",
	Callback = function()loadstring(game:HttpGet('https://raw.githubusercontent.com/M1ZZ001/BrookhavenR4D/main/Brookhaven%20R4D%20Script'))()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


Brookhaven:AddButton({
	Name = "IceHub(Discontinued)",
	Callback = function()loadstring(game:HttpGet("https://raw.githubusercontent.com/IceMael7/NewIceHub/main/Brookhaven"))()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


Brookhaven:AddButton({
	Name = "REDzHub",
	Callback = function()
      		loadstring(game:HttpGet("https://raw.githubusercontent.com/REDzHUB/REDzHUB/main/REDzHUB"))()
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


Brookhaven:AddButton({
	Name = "JulHub(Discontinued/Deleted)",
	Callback = function()loadstring(game:HttpGet("https://raw.githubusercontent.com/JulHubz/JulHub/main/JulHub"))()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]

local Player = game.Players.LocalPlayer

-- Crear sección para los controles de música
Brookhaven:AddSection({
    Name = "Music Controls (Requires GamePass Music)"
})

-- Variable para almacenar el ID de música del carro
local CarMusicID = ""

-- Añadir un TextBox para el ID de la música del carro
local CarTextBox = Brookhaven:AddTextbox({
    Name = "Car Music ID",
    Default = "",
    TextDisappear = false,
    Callback = function(Text)
        CarMusicID = Text
    end
})

-- Añadir un botón de Play para la música del carro
Brookhaven:AddButton({
    Name = "Play Car Music",
    Callback = function()
        -- Verificar que el jugador esté sentado en un vehículo
        local character = Player.Character or Player.CharacterAdded:Wait()
        local humanoid = character:FindFirstChild("Humanoid")
        local seat = humanoid and humanoid.SeatPart

        if seat and seat:IsA("VehicleSeat") then
            local musicId = CarMusicID
            if tonumber(musicId) then
                -- Debug: Imprimir el ID de música del carro para confirmar
                print("Playing car music with ID: " .. musicId)
                
                -- Reproducir la música del carro
                local musicArgs = {
                    [1] = "PickingCarMusicText",
                    [2] = musicId
                }
                
                local remote = game:GetService("ReplicatedStorage"):FindFirstChild("RE") and game:GetService("ReplicatedStorage").RE:FindFirstChild("1Player1sCa1r")
                if remote then
                    remote:FireServer(unpack(musicArgs))
                else
                    warn("Remote not found or not correctly named.")
                end
            else
                warn("Please enter a valid Car Music ID")
            end
        else
            warn("You must be sitting in a vehicle to play car music")
        end
    end
})

-- Variable para almacenar el ID de música de la casa
local HouseMusicID = ""

-- Añadir un TextBox para el ID de la música de la casa
local HouseTextBox = Brookhaven:AddTextbox({
    Name = "House Music ID",
    Default = "",
    TextDisappear = false,
    Callback = function(Text)
        HouseMusicID = Text
    end
})

-- Añadir un botón de Play para la música de la casa
Brookhaven:AddButton({
    Name = "Play House Music",
    Callback = function()
        -- Reproducir la música de la casa
        local musicId = HouseMusicID
        if tonumber(musicId) then
            -- Debug: Imprimir el ID de música de la casa para confirmar
            print("Playing house music with ID: " .. musicId)
            
            -- Reproducir la música de la casa
            local musicArgs = {
                [1] = "PickHouseMusicText",
                [2] = musicId
            }
            
            local remote = game:GetService("ReplicatedStorage"):FindFirstChild("RE") and game:GetService("ReplicatedStorage").RE:FindFirstChild("1Player1sHous1e")
            if remote then
                remote:FireServer(unpack(musicArgs))
            else
                warn("Remote not found or not correctly named.")
            end
        else
            warn("Please enter a valid House Music ID")
        end
    end
})

local Player = game.Players.LocalPlayer

-- Variable para almacenar el ID de música del scooter
local ScooterMusicID = ""

-- Añadir un TextBox para el ID de la música del scooter
local ScooterTextBox = Brookhaven:AddTextbox({
    Name = "Scooter Music ID",
    Default = "",
    TextDisappear = false,
    Callback = function(Text)
        ScooterMusicID = Text
    end
})

-- Añadir un botón de Play para la música del scooter
Brookhaven:AddButton({
    Name = "Play Scooter Music",
    Callback = function()
        -- Reproducir la música del scooter
        local musicId = ScooterMusicID
        if tonumber(musicId) then
            -- Debug: Imprimir el ID de música del scooter para confirmar
            print("Playing scooter music with ID: " .. musicId)
            
            -- Reproducir la música del scooter
            local musicArgs = {
                [1] = "PickingScooterMusicText",
                [2] = musicId
            }
            
            local remote = game:GetService("ReplicatedStorage"):FindFirstChild("RE") and game:GetService("ReplicatedStorage").RE:FindFirstChild("1NoMoto1rVehicle1s")
            if remote then
                remote:FireServer(unpack(musicArgs))
            else
                warn("Remote not found or not correctly named.")
            end
        else
            warn("Please enter a valid Scooter Music ID")
        end
    end
})

local StuffBrookhaven = Brookhaven:AddSection({
	Name = "Another Stuff"
})

-- Function to remove the 'BanBoxBrookhaven' folder
local function RemoveBanBrookhaven()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local BanBoxBrookhaven = ReplicatedStorage:FindFirstChild("BannedLots")

    if BanBoxBrookhaven and BanBoxBrookhaven:IsA("Folder") then
        -- Remove the 'BanBoxBrookhaven' folder
        BanBoxBrookhaven:ClearAllChildren()
        BanBoxBrookhaven:Destroy()

        -- Success notification
        OrionLib:MakeNotification({
            Name = "Success",
            Content = "Ban Was Removed :D lol",
            Image = "rbxassetid://4483345998",
            Time = 5
        })
    else
        -- Error notification
        OrionLib:MakeNotification({
            Name = "Error xd",
            Content = "Ban Remove is Already!",
            Image = "rbxassetid://4483345998",
            Time = 5
        })
    end
end

-- Add button "Unban yourself from a house" to the "Unban" tab
Brookhaven:AddButton({
    Name = "Remove Ban",
    Callback = RemoveBanBrookhaven
})

-- Variables y servicios
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local selectedPlayerRoom = nil
local textboxValueRoom = nil

-- Función para actualizar la lista de jugadores en el dropdown
local function updatePlayerListRoom(dropdownRoom)
    local playerNamesRoom = {}

    for _, player in pairs(Players:GetPlayers()) do
        table.insert(playerNamesRoom, player.Name)
    end

    dropdownRoom:Refresh(playerNamesRoom, false)
end

-- Añadir el TextBox para ingresar el valor
Brookhaven:AddTextbox({
    Name = "House Number",
    Default = "",
    TextDisappear = false,
    Callback = function(value)
        textboxValueRoom = tonumber(value) -- Almacena el valor ingresado
    end
})

-- Añadir el Dropdown para seleccionar jugadores
local DropdownRoom = Brookhaven:AddDropdown({
    Name = "Select Player To Roomate",
    Default = "",
    Options = {}, -- Lista vacía que se actualizará
    Callback = function(playerName)
        selectedPlayerRoom = Players:FindFirstChild(playerName) -- Almacena el jugador seleccionado
    end
})

-- Actualizar la lista de jugadores al iniciar
updatePlayerListRoom(DropdownRoom)

-- Actualizar la lista de jugadores cuando un jugador se une o sale
Players.PlayerAdded:Connect(function()
    updatePlayerListRoom(DropdownRoom)
end)

Players.PlayerRemoving:Connect(function()
    updatePlayerListRoom(DropdownRoom)
end)

-- Añadir el botón para dar permisos
Brookhaven:AddButton({
    Name = "Give Roommate Permission To Selected Player",
    Callback = function()
        if selectedPlayerRoom and textboxValueRoom then
            -- Argumentos para el RemoteEvent
            local args = {
                [1] = "GivePermissionLoopToServer",
                [2] = selectedPlayerRoom, -- Jugador seleccionado en el dropdown
                [3] = textboxValueRoom -- Valor del textbox
            }

            -- Enviar evento al servidor
            ReplicatedStorage.RE:FindFirstChild("1Playe1rTrigge1rEven1t"):FireServer(unpack(args))
            OrionLib:MakeNotification({
                Name = "Success Roomate",
                Content = "Permission granted to " .. selectedPlayerRoom.Name,
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        else
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "Please select a player and place the number of the house.",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        end
    end
})

local BloxFruit = Window:MakeTab({
	Name = "BloxFruit",
	Icon = "rbxassetid://18951446226",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]


BloxFruit:AddButton({
	Name = "FTS X Hub",
	Callback = function()loadstring(game:HttpGet(('https://raw.githubusercontent.com/Tulam2000/FTS-HUB/main/FTS%20x%20Hub')))()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


BloxFruit:AddButton({
	Name = "AnnieHub",
	Callback = function()loadstring(game:HttpGet("https://raw.githubusercontent.com/Anniecuti/Free-Scr/main/Annie-Hub.lua"))()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


local Section = BloxFruit:AddSection({
	Name = "Best"
})

--[[
Name = <string> - The name of the section.
]]


BloxFruit:AddButton({
	Name = "BlackHub/BlckHub",
	Callback = function()loadstring(game:HttpGet("https://raw.githubusercontent.com/1f0yt/community/main/BLCK"))()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


BloxFruit:AddButton({
	Name = "W Azure",
	Callback = function()loadstring(game:HttpGet("https://api.luarmor.net/files/v3/loaders/3b2169cf53bc6104dabe8e19562e5cc2.lua"))()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


BloxFruit:AddButton({
	Name = "REDzHub",
	Callback = function()loadstring(game:HttpGet("https://raw.githubusercontent.com/REDzHUB/BloxFruits/main/redz9999"))()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


local BladeBall = Window:MakeTab({
	Name = "BladeBall",
	Icon = "rbxassetid://18952522884",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]


BladeBall:AddButton({
	Name = "MyScriptV1",
	Callback = function()loadstring(game:HttpGet("https://pastebin.com/raw/0vvStZGN"))()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


BladeBall:AddButton({
	Name = "REDzHub",
	Callback = function()loadstring(game:HttpGet("https://raw.githubusercontent.com/REDzHUB/BladeBall/main/redz9999"))()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]



BladeBall:AddButton({
	Name = "MyScriptV2",
	Callback = function()loadstring(game:HttpGet("https://raw.githubusercontent.com/AdenoxScripterm/BladeBallV1/main/BladeBallV1NM"))()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


local DoomSpire = Window:MakeTab({
	Name = "DoomSpire",
	Icon = "rbxassetid://18135302048",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]


DoomSpire:AddButton({
	Name = "TpIslands",
	Callback = function()loadstring(game:HttpGet("https://raw.githubusercontent.com/AdenoxScripterm/Doomspire/main/DoomspireTeleport"))()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


local PrisonLife = Window:MakeTab({
	Name = "PrisonLife",
	Icon = "rbxassetid://18953320590",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]


PrisonLife:AddButton({
	Name = "PrisonWare",
	Callback = function()loadstring(game:HttpGet("https://raw.githubusercontent.com/Denverrz/scripts/master/PRISONWARE_v1.3.txt"))();
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


PrisonLife:AddButton({
	Name = "TigerAdmin",
	Callback = function()loadstring(game:HttpGet("https://raw.githubusercontent.com/AdenoxScripterm/TigerEdited/main/Tiger%20Admin"))()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]

local SectionTeamPL = PrisonLife:AddSection({
	Name = "Team"
})

--[[
Name = <string> - The name of the section.
]]

-- Botón para cambiar al equipo "Inmate"
PrisonLife:AddButton({
    Name = "Inmate",
    Callback = function()
        local args = {
            [1] = "Bright orange"
        }
        workspace.Remote.TeamEvent:FireServer(unpack(args))
    end
})

-- Botón para cambiar al equipo "Guard"
PrisonLife:AddButton({
    Name = "Guard",
    Callback = function()
        local args = {
            [1] = "Bright blue"
        }
        workspace.Remote.TeamEvent:FireServer(unpack(args))
    end
})

-- Botón para teletransportarse a las coordenadas de criminal
PrisonLife:AddButton({
    Name = "Criminal",
    Callback = function()
        local player = game.Players.LocalPlayer
        local criminalPosition = Vector3.new(-976, 109, 2045)
        player.Character:SetPrimaryPartCFrame(CFrame.new(criminalPosition))
    end
})

local SectionStuff = PrisonLife:AddSection({
	Name = "Stuff"
})

--[[
Name = <string> - The name of the section.
]]

-- Toggle para Auto Melee
local AutoMeleeEnabled = false

PrisonLife:AddToggle({
    Name = "KillAura",
    Default = false,
    Callback = function(Value)
        AutoMeleeEnabled = Value
        while AutoMeleeEnabled and wait() do
            for i, e in pairs(game.Players:GetChildren()) do
                if e ~= game.Players.LocalPlayer then
                    local meleeEvent = game:GetService("ReplicatedStorage").meleeEvent
                    meleeEvent:FireServer(e)
                end
            end
        end
    end
})

PrisonLife:AddButton({
	Name = "Bring Car",
	Callback = function()
      		local OldPos = game:GetService("Players").LocalPlayer.Character:GetPrimaryPartCFrame()
			game:GetService("Players").LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(-910, 95, 2157))
			wait()
			local car = nil
			task.spawn(function()
				car = game:GetService("Workspace").CarContainer.ChildAdded:Wait()
			end)
			repeat wait(.1)
				local ohInstance1 = game:GetService("Workspace").Prison_ITEMS.buttons:GetChildren()[8]["Car Spawner"]
				workspace.Remote.ItemHandler:InvokeServer(ohInstance1)
			until car
			repeat task.wait() until car:FindFirstChild("RWD") and car:FindFirstChild("Body") and car:FindFirstChild("Body"):FindFirstChild("VehicleSeat")
			car.PrimaryPart = car.RWD
			game:GetService("Players").LocalPlayer.Character:SetPrimaryPartCFrame(OldPos)
			wait(1)
			local Done = false
			car.Body.VehicleSeat:Sit(game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"))
			repeat 

				game:GetService("RunService").RenderStepped:Wait()
				car:SetPrimaryPartCFrame(OldPos)
				game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame =CFrame.new(car.Body.VehicleSeat.Position)
				car.Body.VehicleSeat:Sit(game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"))
				if game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Sit == true then
					Done = true
				end
			until Done
		end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]

local LegendsOfSpeed = Window:MakeTab({
	Name = "LegendsOfSpeed",
	Icon = "rbxassetid://18979034603",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]


LegendsOfSpeed:AddButton({
	Name = "MyScript",
	Callback = function()loadstring(game:HttpGet("https://pastebin.com/raw/K6dXZxtG"))()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


local Evade = Window:MakeTab({
	Name = "Evade",
	Icon = "rbxassetid://15143528856",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]


Evade:AddButton({
	Name = "PepesHub",
	Callback = function()loadstring(game:HttpGet("https://raw.githubusercontent.com/PepesGH1/stuff/main/evadeloader.lua"))()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


local Mm2 = Window:MakeTab({
	Name = "Mm2",
	Icon = "rbxassetid://15124465439",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]


Mm2:AddButton({
	Name = "Vynixus",
	Callback = function()loadstring(game:getobjects("rbxassetid://4001118261")[1].source)()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


Mm2:AddButton({
	Name = "SkiHub",
	Callback = function()loadstring(game:HttpGet(("https://pastebin.com/raw/mT10xnt7"), true))() 
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


local Section = Mm2:AddSection({
	Name = "HubsForGame"
})

--[[
Name = <string> - The name of the section.
]]


Mm2:AddButton({
	Name = "UnFairHub",
	Callback = function()loadstring(game:HttpGet(('https://raw.githubusercontent.com/rblxscriptsnet/unfair/main/rblxhub.lua'),true))()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]

local Section = Mm2:AddSection({
	Name = "Wow"
})

--[[
Name = <string> - The name of the section.
]]

Mm2:AddButton({
	Name = "YARHM",
	Callback = function()loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-YARHM-12403"))()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]

Mm2:AddButton({
	Name = "YARHM Reborn",
	Callback = function()loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-YARHM-Elite-14708"))()
      		print("button pressed")
  	end    
})

local StuffMm2 = Mm2:AddSection({
	Name = "Stuff"
})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local Workspace = game:GetService("Workspace")

-- Función para mostrar notificaciones usando OrionLib
local function NotifGunMm2(title, text, duration)
    OrionLib:MakeNotification({
        Name = title,
        Content = text,
        Image = "rbxassetid://4483345998", -- Icono predeterminado, puedes cambiarlo si lo deseas
        Time = duration
    })
end

-- Función para teletransportarse al GunDrop
local function teleportToGunDrop()
    -- Buscar la pistola en tiempo real en cada intento
    local normalFolder = Workspace:FindFirstChild("Normal")
    if normalFolder then
        local gunDrop = normalFolder:FindFirstChild("GunDrop")
        if gunDrop then
            -- Guardar la posición inicial antes de teletransportarse
            local initialPosition = humanoidRootPart.Position

            -- Teletransportar al jugador a la posición del GunDrop
            humanoidRootPart.CFrame = gunDrop.CFrame

            -- Esperar 0.5 segundos y regresar a la posición original
            wait(0.4)
            humanoidRootPart.CFrame = CFrame.new(initialPosition)

            -- Notificación de éxito usando OrionLib
            NotifGunMm2("YESS", "You have the gun rn :D", 3)
        else
            -- Notificación de que no se encontró el GunDrop usando OrionLib
            NotifGunMm2("Gun Not Found", "Wait To The Murderer Kill Sheriff Or Hero.", 3)
        end
    else
        -- Notificación de que no se encontró la carpeta "Normal" usando OrionLib
        NotifGunMm2("Error", "Wait Round To Start...", 3)
    end
end

-- Creación del botón en OrionLib
Tab:AddButton({
    Name = "Teleport to Gun (When Dropped) (Reworked)",
    Callback = function()
        teleportToGunDrop()
    end
})

-- Actualización del HumanoidRootPart en caso de regenerarse tras morir
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
end)

-- Función para encontrar al jugador con el Knife (Asesino)
local function findMurderer()
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player.Backpack:FindFirstChild("Knife") or (player.Character and player.Character:FindFirstChild("Knife")) then
            return player
        end
    end
    return nil
end

-- Función para encontrar al jugador con la Gun (Sheriff)
local function findSheriff()
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player.Backpack:FindFirstChild("Gun") or (player.Character and player.Character:FindFirstChild("Gun")) then
            return player
        end
    end
    return nil
end

-- Función para teletransportarte al Asesino
local function teleportToMurderer()
    local murderer = findMurderer()
    if murderer and murderer.Character and murderer.Character:FindFirstChild("HumanoidRootPart") then
        local player = game.Players.LocalPlayer
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.CFrame = murderer.Character.HumanoidRootPart.CFrame
        else
            warn("Bro Murderer Dead...")
        end
    else
        warn("Where Is The Murderer?")
    end
end

-- Función para teletransportarte al Sheriff
local function teleportToSheriff()
    local sheriff = findSheriff()
    if sheriff and sheriff.Character and sheriff.Character:FindFirstChild("HumanoidRootPart") then
        local player = game.Players.LocalPlayer
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.CFrame = sheriff.Character.HumanoidRootPart.CFrame
        else
            warn("Bro Sheriff Dead...")
        end
    else
        warn("Where Is The Sheriff?...")
    end
end

-- Añadir botones a la pestaña
Mm2:AddButton({
    Name = "Teleport to Murderer",
    Callback = teleportToMurderer
})

Mm2:AddButton({
    Name = "Teleport to Sheriff",
    Callback = teleportToSheriff
})

-- Actualización del HumanoidRootPart en caso de regenerarse tras morir
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
end)

-- Servicios necesarios
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Función para obtener el rol de un jugador
local function getRole(player)
    local character = player.Character
    if character then
        if character:FindFirstChild("Knife") then
            return "Murderer"
        elseif character:FindFirstChild("Gun") then
            return "Sheriff"
        end
    end
    return "Innocent"
end

-- Botón para traer al inocente más cercano hacia ti (cliente)
Mm2:AddButton({
    Name = "Bring Closest Innocent (For Kill It When You Are Murderer.)",
    Callback = function()
        local closestInnocent = nil
        local minDistance = math.huge

        for _, v in pairs(Players:GetPlayers()) do
            local character = v.Character
            if character and v ~= LocalPlayer then
                local role = getRole(v)
                if role == "Innocent" then
                    local distance = (LocalPlayer.Character.HumanoidRootPart.Position - character.HumanoidRootPart.Position).magnitude
                    if distance < minDistance then
                        minDistance = distance
                        closestInnocent = v
                    end
                end
            end
        end

        if closestInnocent and closestInnocent.Character then
            closestInnocent.Character:SetPrimaryPartCFrame(LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(2, 0, 0))
        else
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "No One Inoccent Founded For Bring.",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        end
    end
})

Mm2:AddButton({
	Name = "Esp Gun",
	Callback = function()
      		    local Workspace = game:GetService("Workspace")

-- Función para añadir el texto sobre el GunDrop
local function addGunDropText(gunDrop)
    -- Verificar si el GunDrop ya tiene un texto para evitar duplicados
    if gunDrop:FindFirstChild("GunDropText") then return end

    -- Crear un BillboardGui
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "GunDropText"
    billboardGui.Adornee = gunDrop -- Vincular el GUI al GunDrop
    billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Tamaño del GUI
    billboardGui.StudsOffset = Vector3.new(0, 2, 0) -- Altura sobre el objeto
    billboardGui.AlwaysOnTop = true -- Siempre visible

    -- Crear el texto que aparecerá sobre el GunDrop
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0) -- Tamaño del texto
    textLabel.BackgroundTransparency = 1 -- Fondo transparente
    textLabel.Text = "Gun Is Here Lol" -- Texto que se mostrará
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 0) -- Color del texto (verde)
    textLabel.TextScaled = true -- Escalar el texto
    textLabel.Font = Enum.Font.SourceSansBold -- Fuente del texto
    textLabel.Parent = billboardGui -- Poner el texto en el BillboardGui

    -- Poner el BillboardGui en el GunDrop
    billboardGui.Parent = gunDrop
end

-- Monitorear la existencia del GunDrop
local function monitorGunDrop()
    while true do
        -- Buscar la carpeta "Normal" en Workspace
        local normalFolder = Workspace:FindFirstChild("Normal")
        if normalFolder then
            -- Buscar el GunDrop dentro de la carpeta "Normal"
            local gunDrop = normalFolder:FindFirstChild("GunDrop")
            if gunDrop then
                -- Añadir el texto si se encuentra el GunDrop
                addGunDropText(gunDrop)
            end
        end
        wait(1) -- Revisar cada segundo
    end
end

-- Iniciar monitoreo
monitorGunDrop()
  	end    
})

local ImageLabel = Instance.new("ImageLabel", Instance.new("ScreenGui", gethui()))
ImageLabel.Image = ''
ImageLabel.BackgroundTransparency = 1
ImageLabel.Position = UDim2.new(.5, 0, .1, 0)
ImageLabel.AnchorPoint = Vector2.new(.5, .1)
ImageLabel.Size = UDim2.new(.1, 0, .2, 0)
ImageLabel.Name = 'MurdLabel'
ImageLabel.Parent.ResetOnSpawn = false

local Part = Instance.new("Part", workspace)
Part.Name = "Running Part"
Part.Position = Vector3.new(0, 1000, 0)
Part.Anchored = true
Part.CanCollide = true
Part.Size = Vector3.new(5, 1, 5)

local Plr = game:GetService("Players").LocalPlayer
local vim = game:GetService('VirtualInputManager')

function GetMurderer()
    for i, v in game:GetService("Players"):GetChildren() do
        if v.Backpack:FindFirstChild"Knife" or v.Character and v.Character:FindFirstChild("Knife") then 
            return v.Character 
        end
    end
    return nil
end

function Notify(Title, Text)
    OrionLib:MakeNotification({Name = Title, Content = Text, Time = 5})
end

Mm2:AddButton({
    Name = "Murderer & Sheriff Finder",
    Callback = function()
        local a = game:GetService("Players"):GetChildren()
        table.remove(a, 1)
        for i, v in pairs(a) do
            if v.Backpack:FindFirstChild("Gun") or v.Character:FindFirstChild("Gun") then
                Notify("Sheriff Found!", v.DisplayName .. " is sheriff.")
            elseif v.Backpack:FindFirstChild("Knife") or v.Character:FindFirstChild("Knife") then
                Notify("Murderer Found!", v.DisplayName .. " is murderer.")
            end
        end
    end
})

Mm2:AddToggle({
    Name = "Auto Follow Murderer (Use YARHM And Shoot Murderer.)",
    Default = false,
    Callback = function(value)
        ASM = value
    end
})

game:GetService("RunService").Heartbeat:Connect(function()
    if ASM and Plr.Character and GetMurderer() and (Plr.Character:FindFirstChild("Gun") or Plr.Backpack:FindFirstChild("Gun")) then
        local murderer = GetMurderer()
        Plr.Character.HumanoidRootPart.CFrame = murderer.HumanoidRootPart.CFrame - murderer.Head.CFrame.LookVector * 10
        Plr.Character.Gun.KnifeServer.ShootGun:InvokeServer(1, murderer.HumanoidRootPart.Position, "AH")
    end
end)

local NDS = Window:MakeTab({
	Name = "Natural Disaster",
	Icon = "rbxassetid://15143528539",
	PremiumOnly = false
})

local StuffNDS = NDS:AddSection({
	Name = "Stuff"
})

--[[
Name = <string> - The name of the section.
]]

-- Variable para almacenar el evento y la posición inicial
local event
local initialPosition

-- Añadimos el toggle para mover el HumanoidRootPart
NDS:AddToggle({
    Name = "Auto Farm",
    Default = false,
    Callback = function(bool)
        local player = game.Players.LocalPlayer
        local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        
        if bool and humanoidRootPart then
            -- Guardamos la posición inicial cuando se activa el toggle
            initialPosition = humanoidRootPart.CFrame
            
            -- Conectamos el evento para mover el HumanoidRootPart
            event = game:GetService("RunService").RenderStepped:Connect(function()
                humanoidRootPart.CFrame = CFrame.new(-277, 182, 343)
            end)
        elseif event and humanoidRootPart then
            -- Desconectamos el evento cuando el toggle está desactivado
            event:Disconnect()
            -- Regresamos al jugador a la posición inicial
            humanoidRootPart.CFrame = initialPosition
        end
    end
})

-- Añadimos el botón para iniciar el lanzamiento del cohete
NDS:AddButton({
    Name = "Launch Rocket",
    Callback = function()
        pcall(function()
            fireclickdetector(game:GetService("Workspace").Structure["Launch Land"]["SPACESHIP!!"].Shuttle.IgnitionButton.ClickDetector)
            fireclickdetector(game:GetService("Workspace").Structure["Launch Land"].RocketStand.ConsoleLower.ReleaseButtonLower.ClickDetector)
            fireclickdetector(game:GetService("Workspace").Structure["Launch Land"].RocketStand.ConsoleUpper.ReleaseButtonUpper.ClickDetector)
            fireclickdetector(game:GetService("Workspace").Structure["Launch Land"].LoadingTower.Console.ReleaseEntryBridge.ClickDetector)
        end)
    end
})

-- Añadimos el toggle para modificar el WaterLevel
NDS:AddToggle({
    Name = "Walk On Water",
    Default = false,
    Callback = function(bool)
        local water = game.Workspace:FindFirstChild("WaterLevel")
        
        if water then
            if not bool then 
                water.CanCollide = false
                water.Size = Vector3.new(10, 1, 10)
            elseif bool then 
                water.CanCollide = true
                water.Size = Vector3.new(1000, 1, 1000)
            end
        else
            warn("yo")
        end
    end
})

-- Añadimos el toggle para modificar la colisión de LowerRocks
NDS:AddToggle({
    Name = "Walk Into Island Bords",
    Default = false,
    Callback = function(bool)
        for _, v in pairs(game.Workspace:GetDescendants()) do
            if v.Name == 'LowerRocks' then
                v.CanCollide = bool
            end
        end
    end
})

-- Añadimos el botón para destruir BlizzardGui
NDS:AddButton({
    Name = "No Blizzard Ui",
    Callback = function()
        local playerGui = game.Players.LocalPlayer.PlayerGui
        local blizzardGui = playerGui:FindFirstChild("BlizzardGui")
        if blizzardGui then
            blizzardGui:Destroy()
        end
    end
})

-- Añadimos el botón para destruir SandStormGui
NDS:AddButton({
    Name = "No Sandstorm Ui",
    Callback = function()
        local playerGui = game.Players.LocalPlayer.PlayerGui
        local sandStormGui = playerGui:FindFirstChild("SandStormGui")
        if sandStormGui then
            sandStormGui:Destroy()
        end
    end
})

-- Función para crear notificaciones con OrionLib
local function NotifNDS(title, text, icon)
    OrionLib:MakeNotification({
        Name = title;
        Content = text;
        Image = icon; -- Cambia esto al icono específico que desees usar
        Time = 5;
    })
end

-- Obtener el jugador local
local player = game:GetService("Players").LocalPlayer
local displayName = player.DisplayName
local userName = player.Name

NDS:AddButton({
    Name = "Steal The Green Balloon",
    Callback = function()
        if game.Workspace:FindFirstChild("GreenBalloon", true) then -- Verificar si existe el GreenBalloon
            local balloonClone = game.Workspace:FindFirstChild("GreenBalloon", true):Clone() -- Clonar el GreenBalloon
            balloonClone.Parent = game:GetService("Players").LocalPlayer.Backpack

            -- Notificación de éxito con mensaje y nombres
            NotifNDS("Success Stoled", "I stole the balloon for you\n" .. displayName .. " (" .. userName .. ")", "http://www.roblox.com/asset/?id=6031075934")
        else
            -- Notificación de error
            NotifNDS("No Balloons", "🎈 There are no balloons...", "http://www.roblox.com/asset/?id=6031075935")
        end
    end
})

local TPSNDS = NDS:AddSection({
	Name = "Teleports"
})

-- Opciones de teletransporte
local TeleportOptions = {
    ["Map"] = Vector3.new(-122, 50, 15),
    ["Lobby"] = Vector3.new(-251, 197, 289) -- Cambia las coordenadas según tu lobby
}

-- Variable para almacenar la selección del dropdown
local SelectedLocation = nil

-- Crear el dropdown
NDS:AddDropdown({
    Name = "Select Place To Teleport.",
    Options = {"Map", "Lobby"},
    Callback = function(selected)
        SelectedLocation = TeleportOptions[selected]
        OrionLib:MakeNotification({
            Name = "Selected Place",
            Content = "You selected: " .. selected,
            Image = "rbxassetid://4483345998",
            Time = 5
        })
    end
})

-- Crear el botón para teletransportarse
NDS:AddButton({
    Name = "Teleport To Selected",
    Callback = function()
        if SelectedLocation then
            Player.Character:MoveTo(SelectedLocation)
            OrionLib:MakeNotification({
                Name = "Teleport",
                Content = "You Are Teleporting lol",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        else
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "Select A Teleport.",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        end
    end
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]

--[[
	WARNING: Heads up! This script has not been verified by ScriptBlox. Use at your own risk!
]]
-- new stuff
_G.CodexUiCustomSettings = {
			CodexSpooferImage = 18965493710,
			CodexSpooferText = "SalvredHub",
			CodexSpooferPoweredBy = "Heyy Bro",
			FloatingIconColor=Color3.fromRGB(0, 0, 0),
			MainUiBackground = Color3.fromRGB(0, 0, 0),
			Icons=Color3.fromRGB(255, 255, 255),
			IconsOff = Color3.fromRGB(255, 255, 255),
			Fade = false
		}

_G.CodexSpooferImage  = nil -- Old Build DO NOT TOUCH UNLESS YOU WANT THE OLD VER
_G.CodexSpooferText = nil
_G.CodexSpooferPoweredBy = nil 
loadstring(game:HttpGet("https://github.com/MuhXd/Roblox-mobile-script/blob/main/Codex/Synapse%20X%20Real%20Not%20Clickbait.lua?raw=true" ))();

local DaIconPositionX = ScreenCenterX - DaIconSize.X.Offset / 2
local DaIconPositionY = ScreenCenterY - DaIconSize.Y.Offset / 2
DELTA["DaIcon"].Position = UDim2.new(0, DaIconPositionX, 0, DaIconPositionY/20)
DELTA["DaIcon"].Draggable = true
DELTA["DaIcon"].Image = "rbxassetid://18965493710"
DELTA["DaIcon"].BackgroundColor3 = Color3.fromRGB(255, 0, 0)

DELTA["das"] = Instance.new("UICorner", DELTA["DaIcon"]);

local iconsize = readfile("iconshape")
if iconsize == "Squircle" then
    DELTA["das"]["CornerRadius"] = UDim.new(0.20000000298023224, 0);
elseif iconsize == "Circle" then
    DELTA["das"]["CornerRadius"] = UDim.new(0.50000000298023224, 0);
elseif iconsize == "Square" then
    DELTA["das"]["CornerRadius"] = UDim.new(0, 0);
else
    DELTA["das"]["CornerRadius"] = UDim.new(0.20000000298023224, 0);
end

OrionLib:Init()



if game.PlaceId == 4924922222 then
    -- Your code here
    local args = {
        [1] = "RolePlayName",
        [2] = "SalvredLOL"
    }

    game:GetService("ReplicatedStorage").RE:FindFirstChild("1RPNam1eTex1t"):FireServer(unpack(args))
end
